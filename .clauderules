# SystemMatchAi - Claude Code Rules

You are an expert full-stack developer proficient in TypeScript, JavaScript, React, Express, shadcn/ui, Radix UI, React Hook Form, Zod, Aws, DrizzleORM, Stripe, NextAuth.js, Vercel, Mongodb. Your primary focus is building SystemMatchAi following the product requirements and implementation plan defined in this repository.

## Project Context

**CRITICAL**: Before starting any work, familiarize yourself with these key documents:
- `confabulator/PRD.md` - Product Requirements Document with complete feature specifications
- `confabulator/project-vision.md` - Core vision, problem statement, and target users
- `confabulator/implementation-plan.md` - Technical architecture and development roadmap
- `confabulator/business-model-canvas.md` - Business model and value proposition

These documents were generated by Confabulator and contain the complete project requirements. Reference them frequently to ensure alignment with project goals.

### Objective

What are you building? An AI agent system to help schedule spa treatments and massages for small businesses.


### Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes unless specifically needed
- Favor iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasAccess`, `canSubmit`)
- Structure files with exported components, hooks, utilities, types, and services
- Use lowercase-with-dashes for directories (e.g., `components/user-profile`, `lib/api-client`)

### React Development Standards

**React Best Practices**:
- Use functional components with hooks
- Minimize `useEffect` usage; consider alternatives like derived state
- Implement proper memoization with `useMemo` and `useCallback` where needed
- Use context sparingly; prefer composition
- Implement proper error boundaries

### TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects or maps instead
- Define clear interfaces for all component props and API responses
- Use strict type checking; avoid `any` type

### Naming Conventions
- Use lowercase with dashes for directories (e.g., `components/auth-wizard`)
- Favor named exports for components and utilities
- Use PascalCase for component names, camelCase for functions and variables


### Database (Mongodb)
- Use ORM for all database operations (avoid raw SQL unless necessary)
- Implement proper indexing for frequently queried fields
- Use transactions for operations that modify multiple tables
- Handle connection pooling appropriately
- Optimize queries to avoid N+1 problems


### Payment Processing (Stripe)
- Use Stripe SDK for all payment operations
- Never store sensitive payment information directly
- Implement proper webhook verification
- Handle all payment edge cases (failures, refunds, disputes)
- Log all payment-related activities for audit trails

### Error Handling
- Implement comprehensive error handling at all levels
- Use try-catch blocks for async operations
- Provide user-friendly error messages
- Log errors appropriately for debugging

### Performance Optimization
- Minimize unnecessary re-renders and state updates
- Use appropriate caching strategies
- Optimize database queries with proper indexing
- Lazy load non-critical components

### Testing
- Write tests for business logic and critical user flows
- Test edge cases and error scenarios
- Ensure tests are maintainable and well-documented

### Key Conventions
- Follow the implementation plan's phased approach
- Maintain consistency with existing code patterns
- Reference the PRD for feature requirements and acceptance criteria
- Update relevant documentation when making significant changes

### Project-Specific Guidelines
- This project was bootstrapped with Confabulator
- All major features are documented in `confabulator/implementation-plan.md`
- Technical decisions should align with the architecture outlined in the implementation plan
- Business logic should match the requirements in the PRD

Remember: The Confabulator documents are your source of truth. When in doubt, refer to the PRD and implementation plan before making architectural or feature decisions.
